{"version":3,"sources":["firebase.js","constants/index.js","helpers/index.js","context/projectsContext.js","hooks/index.js","context/selectedProjectContext.js","components/ProjectOverlay.jsx","components/TaskDate.jsx","components/AddTask.jsx","components/layouts/Header.jsx","components/IndividualProject.jsx","components/Projects.jsx","components/AddProject.jsx","components/layouts/Sidebar.jsx","components/Checkbox.jsx","components/Tasks.jsx","components/layouts/Content.jsx","App.js","index.js"],"names":["firebaseConfig","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","collatedTasks","key","name","collatedTasksExist","selectedProject","find","task","generatePushId","PUSH_CHARS","lastRandChars","now","Date","getTime","timeStampChars","Array","i","charAt","Math","floor","id","join","ProjectsContext","createContext","ProjectsProvider","children","useState","projects","setProjects","useEffect","firestore","collection","where","orderBy","get","then","snapshot","allProjects","docs","map","project","data","docId","JSON","stringify","p","useProjects","Provider","value","useProjectsValue","useContext","SelectedProjectContext","SelectedProjectProvider","setSelectedProject","useSelectedProjectValue","ProjectOverlay","setProject","showProjectOverlay","setShowProjectOverlay","className","data-testid","onClick","TaskDate","setTaskDate","showTaskDate","setShowTaskDate","moment","format","add","AddTask","showAddTaskMain","shouldShowMain","showQuickAddTask","setShowQuickAddTask","setTask","taskDate","showMain","setShowMain","addTask","collatedDate","archived","date","userId","type","onChange","event","target","onKeyDown","Header","darkMode","setDarkMode","setShouldShowMain","IndividualProject","doc","delete","Projects","activeValue","active","setActive","data-doc-id","role","tabIndex","aria-label","e","AddProject","shouldShow","show","setShow","projectName","setProjectName","addProject","placeholder","Sidebar","showProjects","setShowProjects","undefined","Checkbox","archiveTask","taskDesc","update","Tasks","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","onSnapshot","newTasks","filter","diff","useTasks","getTitle","length","getCollatedTitle","document","title","Content","App","darkModeDefault","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1a23f63b.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst firebaseConfig = firebase.initializeApp({\n  apiKey: 'AIzaSyAp0xnkvzXSxGMQgM3Q1lY_b7uB8S80Qpo',\n  authDomain: 'react-todo-3ddd0.firebaseapp.com',\n  databaseURL: 'https://react-todo-3ddd0.firebaseio.com',\n  projectId: 'react-todo-3ddd0',\n  storageBucket: 'react-todo-3ddd0.appspot.com',\n  messagingSenderId: '104063289410',\n  appId: '1:104063289410:web:929e08350e4459213085db',\n})\n\nexport { firebaseConfig as firebase }\n","export const collatedTasks = [\n  { key: 'INBOX', name: 'Inbox' },\n  { key: 'TODAY', name: 'Today' },\n  { key: 'WEEK', name: 'Week' },\n]\n\nexport const dummyId = '999'\n","import { collatedTasks } from '../constants'\n\n// Check if the selected project is INBOX, TODAY or WEEK\nexport const collatedTasksExist = (selectedProject) =>\n  collatedTasks.find((task) => task.key === selectedProject)\n\nexport const getTitle = (projects, projectId) =>\n  projects.find((project) => project.projectId === projectId)\n\nexport const getCollatedTitle = (projects, key) =>\n  projects.find((project) => project.key === key)\n\n// Generate ID\nexport const generatePushId = (() => {\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'\n\n  const lastRandChars = []\n\n  return function () {\n    let now = new Date().getTime()\n\n    const timeStampChars = new Array(8)\n    for (var i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64)\n      now = Math.floor(now / 64)\n    }\n\n    let id = timeStampChars.join('')\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i])\n    }\n\n    return id\n  }\n})()\n","import React, { createContext, useContext } from 'react'\n\nimport { useProjects } from '../hooks'\n\nexport const ProjectsContext = createContext()\n\nexport const ProjectsProvider = ({ children }) => {\n  const { projects, setProjects } = useProjects()\n\n  return (\n    <ProjectsContext.Provider value={{ projects, setProjects }}>\n      {children}\n    </ProjectsContext.Provider>\n  )\n}\n\nexport const useProjectsValue = () => useContext(ProjectsContext)\n","import moment from 'moment'\nimport { useState, useEffect } from 'react'\nimport { firebase } from '../firebase'\nimport { collatedTasksExist } from '../helpers'\nimport { dummyId } from '../constants'\n\nexport const useTasks = (selectedProject) => {\n  const [tasks, setTasks] = useState([])\n  const [archivedTasks, setArchivedTasks] = useState([])\n\n  // Hook to updates tasks only when selectedProject changes\n  useEffect(() => {\n    // Fetch all tasks from Firestore belonging to current user\n    let unsubscribe = firebase\n      .firestore()\n      .collection('tasks')\n      .where('userId', '==', dummyId)\n\n    // Filter for tasks of current view\n    unsubscribe =\n      selectedProject && !collatedTasksExist(selectedProject)\n        ? (unsubscribe = unsubscribe.where('projectId', '==', selectedProject))\n        : selectedProject === 'TODAY'\n        ? (unsubscribe = unsubscribe.where(\n            'date',\n            '==',\n            moment().format('DD/MM/YYYY')\n          ))\n        : selectedProject === 'INBOX' || selectedProject === 0\n        ? (unsubscribe = unsubscribe.where('date', '==', ''))\n        : unsubscribe\n\n    // Add taskId to each task\n    unsubscribe = unsubscribe.onSnapshot((snapshot) => {\n      const newTasks = snapshot.docs.map((task) => ({\n        id: task.id,\n        ...task.data(),\n      }))\n\n      // Set filtered tasks to state\n      setTasks(\n        selectedProject === 'WEEK'\n          ? newTasks.filter(\n              (task) =>\n                moment(task.date, 'DD/MM/YYYY').diff(moment(), 'days') <= 7\n              // && task.archived !== true\n            )\n          : newTasks.filter((task) => task.archived === false)\n      )\n      setArchivedTasks(newTasks.filter((task) => task.archived === true))\n    })\n\n    return () => unsubscribe()\n  }, [selectedProject])\n\n  return { tasks, archivedTasks }\n}\n\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([])\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection('projects')\n      .where('userId', '==', dummyId)\n      .orderBy('projectId')\n      .get()\n      .then((snapshot) => {\n        const allProjects = snapshot.docs.map((project) => ({\n          ...project.data(),\n          docId: project.id,\n        }))\n\n        // Only set project if changed, to prevent infinite loop\n        if (\n          JSON.stringify(projects.map((p) => p.projectId)) !==\n          JSON.stringify(allProjects.map((p) => p.projectId))\n        ) {\n          setProjects(allProjects)\n        }\n      })\n  }, [projects])\n\n  return { projects, setProjects }\n}\n","import React, { createContext, useContext, useState } from 'react'\n\nexport const SelectedProjectContext = createContext()\nexport const SelectedProjectProvider = ({ children }) => {\n  const [selectedProject, setSelectedProject] = useState('INBOX')\n\n  return (\n    <SelectedProjectContext.Provider\n      value={{ selectedProject, setSelectedProject }}\n    >\n      {children}\n    </SelectedProjectContext.Provider>\n  )\n}\n\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext)\n","import React from 'react'\nimport { useProjectsValue } from '../context'\n\nexport const ProjectOverlay = ({\n  setProject,\n  showProjectOverlay,\n  setShowProjectOverlay,\n}) => {\n  const { projects } = useProjectsValue()\n\n  return (\n    projects &&\n    showProjectOverlay && (\n      <div className='project-overlay' data-testid='project-overlay'>\n        <ul className='project-overlay__list'>\n          {projects.map((project) => (\n            <li\n              key={project.projectId}\n              data-testid='project-overlay-action'\n              onClick={() => {\n                setProject(project.projectId)\n                setShowProjectOverlay(false)\n              }}\n            >\n              {project.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  )\n}\n","import React from 'react'\nimport moment from 'moment'\nimport { FaRegPaperPlane, FaSpaceShuttle, FaSun } from 'react-icons/fa'\n\nexport const TaskDate = ({ setTaskDate, showTaskDate, setShowTaskDate }) => {\n  return (\n    showTaskDate && (\n      <div className='task-date' data-testid='task-date-overlay'>\n        <ul className='task-date__list'>\n          <li\n            data-testid='task-date-overlay'\n            onClick={() => {\n              setShowTaskDate(false)\n              setTaskDate(moment().format('DD/MM/YYYY'))\n            }}\n          >\n            <FaSpaceShuttle />\n            <span>Today</span>\n          </li>\n          <li\n            data-testid='task-date-tomorrow'\n            onClick={() => {\n              setShowTaskDate(false)\n              setTaskDate(moment().add(1, 'day').format('DD/MM/YYYY'))\n            }}\n          >\n            <FaSun />\n            <span>Tomorrow</span>\n          </li>\n          <li\n            data-testid='task-date-next-week'\n            onClick={() => {\n              setShowTaskDate(false)\n              setTaskDate(moment().add(7, 'days').format('DD/MM/YYYY'))\n            }}\n          >\n            <FaRegPaperPlane />\n            <span>Next Week</span>\n          </li>\n        </ul>\n      </div>\n    )\n  )\n}\n","import React, { useState } from 'react'\nimport { FaRegListAlt, FaRegCalendarAlt } from 'react-icons/fa'\nimport moment from 'moment'\nimport { firebase } from '../firebase'\nimport { useSelectedProjectValue } from '../context'\nimport { dummyId } from '../constants'\nimport { ProjectOverlay } from './ProjectOverlay'\nimport { TaskDate } from './TaskDate'\n\nexport const AddTask = ({\n  showAddTaskMain = true,\n  shouldShowMain = false,\n  showQuickAddTask,\n  setShowQuickAddTask,\n}) => {\n  const [task, setTask] = useState('')\n  const [taskDate, setTaskDate] = useState('')\n  const [project, setProject] = useState('')\n  const [showMain, setShowMain] = useState(shouldShowMain)\n  const [showProjectOverlay, setShowProjectOverlay] = useState(false)\n  const [showTaskDate, setShowTaskDate] = useState(false)\n\n  const { selectedProject } = useSelectedProjectValue()\n\n  const addTask = () => {\n    const projectId = project || selectedProject\n    let collatedDate = ''\n\n    if (taskDate !== '') {\n      collatedDate = taskDate\n    } else if (projectId === 'TODAY') {\n      collatedDate = moment().format('DD/MM/YYYY')\n    } else if (projectId === 'WEEK') {\n      collatedDate = moment().add(7, 'days').format('DD/MM/YYYY')\n    }\n\n    if (showQuickAddTask) {\n      setShowQuickAddTask(false)\n    }\n\n    return (\n      task &&\n      projectId &&\n      firebase\n        .firestore()\n        .collection('tasks')\n        .add({\n          archived: false,\n          projectId,\n          task,\n          date: collatedDate,\n          userId: dummyId,\n        })\n        .then(() => {\n          setTask('')\n          setProject('')\n          setShowMain('')\n          setShowProjectOverlay(false)\n          setShowTaskDate(false)\n        })\n    )\n  }\n\n  return (\n    <div\n      className={showQuickAddTask ? 'add-task add-task__overlay' : 'add-task'}\n      data-testid='add-task-comp'\n    >\n      {showAddTaskMain && (\n        <div\n          className='add-task__shallow'\n          data-testid='show-main-action'\n          onClick={() => setShowMain(!showMain)}\n        >\n          <span className='add-task__plus'>+</span>\n          <span className='add-task__text'>Add Task</span>\n        </div>\n      )}\n\n      {/* Add task component */}\n      {(showMain || showQuickAddTask) && (\n        <div className='add-task__main' data-testid='add-task-main'>\n          {showQuickAddTask && (\n            <>\n              <div data-testid='quick-add-task'>\n                <h2 className='header'>Quick Add Task</h2>\n                <span\n                  className='add-task__cancel-x'\n                  data-testid='add-task-quick-cancel'\n                  onClick={() => {\n                    setShowMain(false)\n                    setShowProjectOverlay(false)\n                    setShowQuickAddTask(false)\n                  }}\n                >\n                  x\n                </span>\n              </div>\n            </>\n          )}\n          <ProjectOverlay\n            setProject={setProject}\n            showProjectOverlay={showProjectOverlay}\n            setShowProjectOverlay={setShowProjectOverlay}\n          />\n          <TaskDate\n            setTaskDate={setTaskDate}\n            showTaskDate={showTaskDate}\n            setShowTaskDate={setShowTaskDate}\n          />\n          <input\n            type='text'\n            className='add-task__content'\n            data-testid='add-task-content'\n            value={task}\n            onChange={(event) => setTask(event.target.value)}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter') {\n                addTask()\n              }\n            }}\n          />\n          <button\n            className='add-task__submit'\n            data-testid='add-task'\n            onClick={() => addTask()}\n          >\n            Add Task\n          </button>\n          {!showQuickAddTask && (\n            <span\n              className='add-task__cancel'\n              data-testid='add-task-main-cancel'\n              onClick={() => {\n                setShowMain(false)\n                setShowProjectOverlay(false)\n                setShowTaskDate(false)\n              }}\n            >\n              Cancel\n            </span>\n          )}\n          <span\n            className='add-task__project'\n            data-testid='show-project-overlay'\n            onClick={() => {\n              setShowTaskDate(false)\n              setShowProjectOverlay(!showProjectOverlay)\n            }}\n          >\n            <FaRegListAlt />\n          </span>\n          <span\n            className='add-task__date'\n            data-testid='show-task-date-overlay'\n            onClick={() => {\n              setShowProjectOverlay(false)\n              setShowTaskDate(!showTaskDate)\n            }}\n          >\n            <FaRegCalendarAlt />\n          </span>\n        </div>\n      )}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { AddTask } from '../AddTask'\nimport { FaPaperPlane } from 'react-icons/fa'\nimport { BsSun, BsMoon } from 'react-icons/bs'\n\nexport const Header = ({ darkMode, setDarkMode }) => {\n  const [shouldShowMain, setShouldShowMain] = useState(false)\n  const [showQuickAddTask, setShowQuickAddTask] = useState(false)\n\n  return (\n    <header className='header' id='header' data-testid='header'>\n      <nav>\n        <div className='logo'>\n          <FaPaperPlane />\n          <span className='title'> Todo</span>\n        </div>\n        <div className='settings'>\n          <ul>\n            <li\n              className='settings__add'\n              data-testid='quick-add-task-action'\n              onClick={() => {\n                setShowQuickAddTask(true)\n                setShouldShowMain(true)\n              }}\n            >\n              +\n            </li>\n            <li className='settings__darkMode' data-testid='dark-mode-action'>\n              {darkMode ? (\n                <BsSun onClick={() => setDarkMode(false)} />\n              ) : (\n                <BsMoon onClick={() => setDarkMode(true)} />\n              )}\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <AddTask\n        showAddTaskMain={false}\n        shouldShowMain={shouldShowMain}\n        showQuickAddTask={showQuickAddTask}\n        setShowQuickAddTask={setShowQuickAddTask}\n      />\n    </header>\n  )\n}\n","import React from 'react'\nimport { FaTrashAlt } from 'react-icons/fa'\nimport { useProjectsValue, useSelectedProjectValue } from '../context'\nimport { firebase } from '../firebase'\n\nexport const IndividualProject = ({ project }) => {\n  // Access global context\n  const { projects, setProjects } = useProjectsValue()\n  const { setSelectedProject } = useSelectedProjectValue()\n\n  // Init state to show project delete modal\n  // const [showConfirm, setShowConfirm] = useState(false)\n\n  // Delete project and then refresh projects by calling useProject hook through setProjects\n  const deleteProject = (docId) => {\n    firebase\n      .firestore()\n      .collection('projects')\n      .doc(docId)\n      .delete()\n      .then(() => {\n        setProjects([...projects])\n        setSelectedProject('INBOX')\n      })\n  }\n\n  return (\n    <>\n      <span className='sidebar__dot'>•</span>\n      <span className='sidebar__project-name'>{project.name}</span>\n      <span\n        className='sidebar__project-delete'\n        data-testid='delete-project'\n        onClick={() => deleteProject(project.docId)}\n        // onClick={() => setShowConfirm(!showConfirm)}\n        // onKeyDown={(e) => {\n        //   if (e.key === 'Enter') setShowConfirm(!showConfirm)\n        // }}\n        // tabIndex={0}\n        // role='button'\n        // aria-label='Confirm deletion of project'\n      >\n        <FaTrashAlt />\n        {/* {showConfirm && (\n          <div className='project-delete-modal'>\n            <div className='project-delete-modal__inner'>\n              <p>Are you sure you want to delete this project?</p>\n              <button\n                type='button'\n                onClick={() => deleteProject(project.docId)}\n              >\n                Delete\n              </button>\n              <span\n                // onClick={() => setShowConfirm(!showConfirm)}\n                // onKeyDown={(e) => {\n                //   if (e.key === 'Enter') setShowConfirm(!showConfirm)\n                // }}\n                // tabIndex={0}\n                // role='button'\n                // aria-label='Cancel adding project, do not delete'\n              >\n                Cancel\n              </span>\n            </div>\n          </div>\n        )} */}\n      </span>\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useProjectsValue, useSelectedProjectValue } from '../context'\nimport { IndividualProject } from './IndividualProject'\n\nexport const Projects = ({ activeValue = null }) => {\n  // Init state\n  const [active, setActive] = useState(activeValue)\n  // Access global context\n  const { setSelectedProject } = useSelectedProjectValue()\n  const { projects } = useProjectsValue()\n\n  return (\n    projects &&\n    projects.map((project) => (\n      <li\n        key={project.projectId}\n        data-testid='project-action-parent'\n        data-doc-id={project.docId}\n        className={\n          active === project.projectId\n            ? 'active sidebar__project'\n            : 'sidebar__project'\n        }\n      >\n        <div\n          role='button'\n          data-testid='project-action'\n          tabIndex={0}\n          aria-label={`Select ${project.name} as the task project`}\n          onClick={() => {\n            setActive(project.projectId)\n            setSelectedProject(project.projectId)\n          }}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              setActive(project.projectId)\n              setSelectedProject(project.projectId)\n            }\n          }}\n        >\n          <IndividualProject project={project} />\n        </div>\n      </li>\n    ))\n  )\n}\n","import React, { useState } from 'react'\nimport { firebase } from '../firebase'\nimport { generatePushId } from '../helpers'\nimport { useProjectsValue } from '../context'\nimport { dummyId } from '../constants'\n\nexport const AddProject = ({ shouldShow = false }) => {\n  const [show, setShow] = useState(shouldShow)\n  const [projectName, setProjectName] = useState('')\n\n  // Generate random ID\n  const projectId = generatePushId()\n\n  const { projects, setProjects } = useProjectsValue()\n\n  const addProject = () => {\n    projectName &&\n      firebase\n        .firestore()\n        .collection('projects')\n        .add({\n          projectId,\n          name: projectName,\n          userId: dummyId,\n        })\n        .then(() => {\n          // Refetch projects by changing project context, which calls Firestore useEffect\n          setProjects([...projects])\n          setProjectName('')\n          setShow(false)\n        })\n  }\n\n  return (\n    <div className='add-project' data-testid='add-project'>\n      {show && (\n        <div className='add-project__input'>\n          <input\n            value={projectName}\n            onChange={(event) => {\n              setProjectName(event.target.value)\n            }}\n            onKeyDown={(event) => {\n              if (event.key === 'Enter') {\n                addProject()\n              }\n            }}\n            className='add-project__name'\n            data-testid='project-name'\n            type='text'\n            placeholder='Project name'\n          />\n          <button\n            className='add-project__submit'\n            type='button'\n            onClick={() => addProject()}\n            data-testid='add-project-submit'\n          >\n            Add Project\n          </button>\n          <span\n            role='button'\n            tabIndex={0}\n            data-testid='hide-project-overlay'\n            className='add-project__cancel'\n            onClick={() => {\n              setShow(false)\n            }}\n          >\n            Cancel\n          </span>\n        </div>\n      )}\n      {!show && (\n        <>\n          <span className='add-project__plus'>+</span>\n          <span\n            data-testid='add-project-action'\n            className='add-project__text'\n            onClick={() => setShow(!show)}\n          >\n            Project\n          </span>\n        </>\n      )}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelectedProjectValue } from '../../context'\nimport {\n  FaChevronDown,\n  FaInbox,\n  FaRegCalendarAlt,\n  FaRegCalendar,\n} from 'react-icons/fa'\nimport { Projects } from '../Projects'\nimport { AddProject } from '../AddProject'\n\nexport const Sidebar = () => {\n  // Access global context\n  const { setSelectedProject } = useSelectedProjectValue()\n\n  // Init state for active project and show/hide projects\n  const [active, setActive] = useState('inbox')\n  const [showProjects, setShowProjects] = useState(true)\n\n  return (\n    <div className='sidebar' data-testid='sidebar'>\n      <ul className='sidebar__generic'>\n        <li\n          data-testid='inbox'\n          className={active === 'inbox' ? 'active' : undefined}\n        >\n          <div\n            data-testid='inbox-action'\n            aria-label='Show inbox tasks'\n            tabIndex={0}\n            role='button'\n            onClick={() => {\n              setActive('inbox')\n              setSelectedProject('INBOX')\n            }}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                setActive('inbox')\n                setSelectedProject('INBOX')\n              }\n            }}\n          >\n            <span>\n              <FaInbox />\n            </span>\n            <span>Inbox</span>\n          </div>\n        </li>\n        <li\n          data-testid='today'\n          className={active === 'today' ? 'active' : undefined}\n        >\n          <div\n            data-testid='today-action'\n            aria-label=\"Show today's tasks\"\n            tabIndex={0}\n            role='button'\n            onClick={() => {\n              setActive('today')\n              setSelectedProject('TODAY')\n            }}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                setActive('today')\n                setSelectedProject('TODAY')\n              }\n            }}\n          >\n            <span>\n              <FaRegCalendar />\n            </span>\n            <span>Today</span>\n          </div>\n        </li>\n        <li\n          data-testid='week'\n          className={active === 'week' ? 'active' : undefined}\n        >\n          <div\n            data-testid='week-action'\n            aria-label='Show tasks for the next 7 days'\n            tabIndex={0}\n            role='button'\n            onClick={() => {\n              setActive('week')\n              setSelectedProject('WEEK')\n            }}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                setActive('week')\n                setSelectedProject('WEEK')\n              }\n            }}\n          >\n            <span>\n              <FaRegCalendarAlt />\n            </span>\n            <span>Next 7 days</span>\n          </div>\n        </li>\n      </ul>\n      <div\n        className='sidebar__middle'\n        aria-label='Show/hide projects'\n        onClick={() => setShowProjects(!showProjects)}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') setShowProjects(!showProjects)\n        }}\n        role='button'\n        tabIndex={0}\n      >\n        <span>\n          <FaChevronDown\n            className={!showProjects ? 'hidden-projects' : undefined}\n          />\n        </span>\n        <h2>Projects</h2>\n      </div>\n\n      <ul className='sidebar__projects'>{showProjects && <Projects />}</ul>\n\n      {showProjects && <AddProject />}\n    </div>\n  )\n}\n","import React from 'react'\nimport { firebase } from '../firebase'\n\nexport const Checkbox = ({ id, taskDesc }) => {\n  // Update Firestore document archived field to true\n  const archiveTask = () => {\n    firebase.firestore().collection('tasks').doc(id).update({ archived: true })\n  }\n\n  return (\n    <div\n      className='checkbox-holder'\n      data-testid='checkbox-action'\n      onClick={() => archiveTask()}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') archiveTask()\n      }}\n    >\n      <span className='checkbox' />\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useTasks } from '../hooks'\nimport { Checkbox } from './Checkbox'\nimport { AddTask } from './AddTask'\nimport { collatedTasks } from '../constants'\nimport { getTitle, getCollatedTitle, collatedTasksExist } from '../helpers'\nimport { useProjectsValue, useSelectedProjectValue } from '../context'\n\nexport const Tasks = () => {\n  // Access global context\n  const { projects } = useProjectsValue()\n  const { selectedProject } = useSelectedProjectValue()\n\n  // Fetch tasks for selected project view using useTask hook\n  const { tasks } = useTasks(selectedProject)\n\n  let projectName = 'ProjectName'\n\n  // Check that selectedProject is *NOT* INBOX / TODAY / WEEK\n  if (projects && selectedProject && !collatedTasksExist(selectedProject)) {\n    projectName = getTitle(projects, selectedProject).name\n  }\n\n  if (\n    projects.length > 0 &&\n    selectedProject &&\n    collatedTasksExist(selectedProject)\n  ) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name\n  }\n\n  useEffect(() => {\n    document.title = `Todo: ${projectName}`\n  }, [projectName])\n\n  return (\n    <div className='tasks' data-testid='tasks'>\n      <h2 data-testid='project-name'>{projectName}</h2>\n      <ul className='tasks__list'>\n        {tasks.map((task) => (\n          <li key={task.id}>\n            <Checkbox id={task.id} taskDesc={task.task} />\n            <span>{task.task}</span>\n          </li>\n        ))}\n      </ul>\n\n      <AddTask />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Sidebar } from './Sidebar'\nimport { Tasks } from '../Tasks'\n\nexport const Content = () => {\n  return (\n    <section className='content'>\n      <Sidebar />\n      <Tasks />\n    </section>\n  )\n}\n","import React, { useState } from 'react'\nimport { ProjectsProvider, SelectedProjectProvider } from './context'\nimport { Header } from './components/layouts/Header'\nimport { Content } from './components/layouts/Content'\nimport './App.scss'\n\nconst App = ({ darkModeDefault = true }) => {\n  const [darkMode, setDarkMode] = useState(darkModeDefault)\n\n  return (\n    <SelectedProjectProvider>\n      <ProjectsProvider>\n        <main\n          data-testid='application'\n          className={darkMode ? 'darkmode' : undefined}\n        >\n          <Header darkMode={darkMode} setDarkMode={setDarkMode} />\n          <Content />\n        </main>\n      </ProjectsProvider>\n    </SelectedProjectProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}