{"version":3,"sources":["firebase.js","constants/index.js","helpers/index.js","context/projectsContext.js","hooks/index.js","context/selectedProjectContext.js","components/layouts/Header.jsx","components/IndividualProject.jsx","components/Projects.jsx","components/AddProject.jsx","components/layouts/Sidebar.jsx","components/Checkbox.jsx","components/Tasks.jsx","components/layouts/Content.jsx","App.js","index.js"],"names":["firebaseConfig","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","collatedTasks","key","name","collatedTasksExist","selectedProject","find","task","generatePushId","PUSH_CHARS","lastRandChars","now","Date","getTime","timeStampChars","Array","i","charAt","Math","floor","id","join","ProjectsContext","createContext","ProjectsProvider","children","useState","projects","setProjects","useEffect","firestore","collection","where","orderBy","get","then","snapshot","allProjects","docs","map","project","data","docId","JSON","stringify","useProjects","Provider","value","useProjectsValue","useContext","SelectedProjectContext","SelectedProjectProvider","setSelectedProject","useSelectedProjectValue","Header","className","data-testid","IndividualProject","showConfirm","setShowConfirm","onClick","type","doc","delete","Projects","activeValue","active","setActive","data-doc-id","role","tabIndex","aria-label","onKeyDown","e","AddProject","shouldShow","show","setShow","projectName","setProjectName","onChange","event","target","placeholder","add","userId","Sidebar","showProjects","setShowProjects","undefined","Checkbox","archiveTask","update","archived","Tasks","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","moment","format","onSnapshot","newTasks","filter","date","diff","useTasks","getTitle","getCollatedTitle","document","title","Content","App","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0b77dfa5.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst firebaseConfig = firebase.initializeApp({\n  apiKey: 'AIzaSyAp0xnkvzXSxGMQgM3Q1lY_b7uB8S80Qpo',\n  authDomain: 'react-todo-3ddd0.firebaseapp.com',\n  databaseURL: 'https://react-todo-3ddd0.firebaseio.com',\n  projectId: 'react-todo-3ddd0',\n  storageBucket: 'react-todo-3ddd0.appspot.com',\n  messagingSenderId: '104063289410',\n  appId: '1:104063289410:web:929e08350e4459213085db',\n})\n\nexport { firebaseConfig as firebase }\n","export const collatedTasks = [\n  { key: 'INBOX', name: 'Inbox' },\n  { key: 'TODAY', name: 'Today' },\n  { key: 'WEEK', name: 'Week' },\n]\n\nexport const dummyId = '999'\n","import { collatedTasks } from '../constants'\n\n// Check if the selected project is INBOX, TODAY or WEEK\nexport const collatedTasksExist = (selectedProject) =>\n  collatedTasks.find((task) => task.key === selectedProject)\n\nexport const getTitle = (projects, projectId) =>\n  projects.find((project) => project.projectId === projectId)\n\nexport const getCollatedTitle = (projects, key) =>\n  projects.find((project) => project.key === key)\n\n// Generate ID\nexport const generatePushId = (() => {\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'\n\n  const lastRandChars = []\n\n  return function () {\n    let now = new Date().getTime()\n\n    const timeStampChars = new Array(8)\n    for (var i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64)\n      now = Math.floor(now / 64)\n    }\n\n    let id = timeStampChars.join('')\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i])\n    }\n\n    return id\n  }\n})()\n","import React, { createContext, useContext } from 'react'\n\nimport { useProjects } from '../hooks'\n\nexport const ProjectsContext = createContext()\n\nexport const ProjectsProvider = ({ children }) => {\n  const { projects, setProjects } = useProjects()\n\n  return (\n    <ProjectsContext.Provider value={{ projects, setProjects }}>\n      {children}\n    </ProjectsContext.Provider>\n  )\n}\n\nexport const useProjectsValue = () => useContext(ProjectsContext)\n","import moment from 'moment'\nimport { useState, useEffect } from 'react'\nimport { firebase } from '../firebase'\nimport { collatedTasksExist } from '../helpers'\nimport { dummyId } from '../constants'\n\nexport const useTasks = (selectedProject) => {\n  const [tasks, setTasks] = useState([])\n  const [archivedTasks, setArchivedTasks] = useState([])\n\n  // Hook to updates tasks only when selectedProject changes\n  useEffect(() => {\n    // Fetch all tasks from Firestore belonging to current user\n    let unsubscribe = firebase\n      .firestore()\n      .collection('tasks')\n      .where('userId', '==', dummyId)\n\n    // Filter for tasks of current view\n    unsubscribe =\n      selectedProject && !collatedTasksExist(selectedProject)\n        ? (unsubscribe = unsubscribe.where('projectId', '==', selectedProject))\n        : selectedProject === 'TODAY'\n        ? (unsubscribe = unsubscribe.where(\n            'date',\n            '==',\n            moment().format('DD/MM/YYYY')\n          ))\n        : selectedProject === 'INBOX' || selectedProject === 0\n        ? (unsubscribe = unsubscribe.where('date', '==', ''))\n        : unsubscribe\n\n    // Set filtered tasks to state\n    unsubscribe = unsubscribe.onSnapshot((snapshot) => {\n      const newTasks = snapshot.docs.map((task) => ({\n        id: task.id,\n        ...task.data(),\n      }))\n\n      setTasks(\n        selectedProject === 'WEEK'\n          ? newTasks.filter(\n              (task) =>\n                moment(task.date, 'DD-MM-YYY').diff(moment(), 'days') <= 7 &&\n                task.archived !== true\n            )\n          : newTasks.filter((task) => task.archived === false)\n      )\n\n      setArchivedTasks(newTasks.filter((task) => task.archived === true))\n    })\n\n    return () => unsubscribe()\n  }, [selectedProject])\n\n  return { tasks, archivedTasks }\n}\n\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([])\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection('projects')\n      .where('userId', '==', dummyId)\n      .orderBy('projectId')\n      .get()\n      .then((snapshot) => {\n        const allProjects = snapshot.docs.map((project) => ({\n          ...project.data(),\n          docId: project.id,\n        }))\n\n        // Check if changed, to prevent infinite loop\n        if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n          setProjects(allProjects)\n        }\n      })\n  }, [projects])\n\n  return { projects, setProjects }\n}\n","import React, { createContext, useContext, useState } from 'react'\n\nexport const SelectedProjectContext = createContext()\nexport const SelectedProjectProvider = ({ children }) => {\n  const [selectedProject, setSelectedProject] = useState('INBOX')\n\n  return (\n    <SelectedProjectContext.Provider\n      value={{ selectedProject, setSelectedProject }}\n    >\n      {children}\n    </SelectedProjectContext.Provider>\n  )\n}\n\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext)\n","import React from 'react'\nimport { FaPaperPlane, FaAlignJustify } from 'react-icons/fa'\n\nexport const Header = () => {\n  return (\n    <header className='header' data-testid='header'>\n      <nav>\n        <div className='logo'>\n          <FaPaperPlane />\n        </div>\n        <div className='settings'>\n          <ul>\n            <li className='settings__add' data-testid='quick-add-task-action'>\n              +\n            </li>\n            <li className='settings__darknode' data-testid='dark-mode-action'>\n              <FaAlignJustify />\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </header>\n  )\n}\n","import React, { useState } from 'react'\nimport { FaTrashAlt } from 'react-icons/fa'\nimport { useProjectsValue, useSelectedProjectValue } from '../context'\nimport { firebase } from '../firebase'\n\nexport const IndividualProject = ({ project }) => {\n  // Access global context\n  const { projects, setProjects } = useProjectsValue()\n  const { setSelectedProject } = useSelectedProjectValue()\n\n  // Init state to show project delete modal\n  const [showConfirm, setShowConfirm] = useState(false)\n\n  // Delete project and then refresh projects by calling useProject hook through setProjects\n  const deleteProject = (docId) => {\n    firebase\n      .firestore()\n      .collection('projects')\n      .doc(docId)\n      .delete()\n      .then(() => {\n        setProjects([...projects])\n        setSelectedProject('INBOX')\n      })\n  }\n\n  return (\n    <>\n      <span className='sidebar__dot'>•</span>\n      <span className='sidebar__project-name'>{project.name}</span>\n      <span\n        className='sidebar__project-delete'\n        data-testid='delete-project'\n        onClick={() => setShowConfirm(!showConfirm)}\n        // onKeyDown={(e) => {\n        //   if (e.key === 'Enter') setShowConfirm(!showConfirm)\n        // }}\n        // tabIndex={0}\n        // role='button'\n        // aria-label='Confirm deletion of project'\n      >\n        <FaTrashAlt />\n        {showConfirm && (\n          <div className='project-delete-modal'>\n            <div className='project-delete-modal__inner'>\n              <p>Are you sure you want to delete this project?</p>\n              <button\n                type='button'\n                onClick={() => deleteProject(project.docId)}\n              >\n                Delete\n              </button>\n              <span\n                onClick={() => setShowConfirm(!showConfirm)}\n                // onKeyDown={(e) => {\n                //   if (e.key === 'Enter') setShowConfirm(!showConfirm)\n                // }}\n                // tabIndex={0}\n                // role='button'\n                // aria-label='Cancel adding project, do not delete'\n              >\n                Cancel\n              </span>\n            </div>\n          </div>\n        )}\n      </span>\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useProjectsValue, useSelectedProjectValue } from '../context'\nimport { IndividualProject } from './IndividualProject'\n\nexport const Projects = ({ activeValue = null }) => {\n  // Init state\n  const [active, setActive] = useState(activeValue)\n  // Access global context\n  const { setSelectedProject } = useSelectedProjectValue()\n  const { projects } = useProjectsValue()\n\n  return (\n    projects &&\n    projects.map((project) => (\n      <li\n        key={project.projectId}\n        data-testid='project-action-parent'\n        data-doc-id={project.docId}\n        className={\n          active === project.projectId\n            ? 'active sidebar__project'\n            : 'sidebar__project'\n        }\n      >\n        <div\n          role='button'\n          data-testid='project-action'\n          tabIndex={0}\n          aria-label={`Select ${project.name} as the task project`}\n          onClick={() => {\n            setActive(project.projectId)\n            setSelectedProject(project.projectId)\n          }}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              setActive(project.projectId)\n              setSelectedProject(project.projectId)\n            }\n          }}\n        >\n          <IndividualProject project={project} />\n        </div>\n      </li>\n    ))\n  )\n}\n","import React, { useState } from 'react'\nimport { firebase } from '../firebase'\nimport { generatePushId } from '../helpers'\nimport { useProjectsValue } from '../context'\nimport { dummyId } from '../constants'\n\nexport const AddProject = ({ shouldShow = false }) => {\n  const [show, setShow] = useState(shouldShow)\n  const [projectName, setProjectName] = useState('')\n\n  // Generate random ID\n  const projectId = generatePushId()\n\n  const { setProjects } = useProjectsValue()\n\n  const addProject = () => {\n    projectName &&\n      firebase\n        .firestore()\n        .collection('projects')\n        .add({\n          projectId,\n          name: projectName,\n          userId: dummyId,\n        })\n        .then(() => {\n          // Refetch projects by changing project context, which calls Firestore useEffect\n          setProjects([])\n          setProjectName('')\n          setShow(false)\n        })\n  }\n\n  return (\n    <div className='add-project' data-testid='add-project'>\n      {show && (\n        <div className='add-project__input'>\n          <input\n            value={projectName}\n            onChange={(event) => setProjectName(event.target.value)}\n            className='add-project__name'\n            data-testid='project-name'\n            type='text'\n            placeholder='Project name'\n          />\n          <button\n            className='add-project__submit'\n            type='button'\n            onClick={() => addProject()}\n            data-testid='add-project-submit'\n          >\n            Add Project\n          </button>\n          <span\n            data-testid='hide-project-overlay'\n            className='add-project__cancel'\n            onClick={() => setShow(false)}\n          >\n            Cancel\n          </span>\n        </div>\n      )}\n      {!show && (\n        <>\n          <span className='add-project__plus'>+</span>\n          <span\n            data-testid='add-project-action'\n            className='add-project__text'\n            onClick={() => setShow(!show)}\n          >\n            Project\n          </span>\n        </>\n      )}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelectedProjectValue } from '../../context'\nimport {\n  FaChevronDown,\n  FaInbox,\n  FaRegCalendarAlt,\n  FaRegCalendar,\n} from 'react-icons/fa'\nimport { Projects } from '../Projects'\nimport { AddProject } from '../AddProject'\n\nexport const Sidebar = () => {\n  // Access global context\n  const { setSelectedProject } = useSelectedProjectValue()\n\n  // Init state for active project and show/hide projects\n  const [active, setActive] = useState('inbox')\n  const [showProjects, setShowProjects] = useState(true)\n\n  return (\n    <div className='sidebar' data-testid='sidebar'>\n      <ul className='sidebar__generic'>\n        <li\n          data-testid='inbox'\n          className={active === 'inbox' ? 'active' : undefined}\n        >\n          <div\n            data-testid='inbox-action'\n            aria-label='Show inbox tasks'\n            tabIndex={0}\n            role='button'\n            onClick={() => {\n              setActive('inbox')\n              setSelectedProject('INBOX')\n            }}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                setActive('inbox')\n                setSelectedProject('INBOX')\n              }\n            }}\n          >\n            <span>\n              <FaInbox />\n            </span>\n            <span>Inbox</span>\n          </div>\n        </li>\n        <li\n          data-testid='today'\n          className={active === 'today' ? 'active' : undefined}\n        >\n          <div\n            data-testid='today-action'\n            aria-label=\"Show today's tasks\"\n            tabIndex={0}\n            role='button'\n            onClick={() => {\n              setActive('today')\n              setSelectedProject('TODAY')\n            }}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                setActive('today')\n                setSelectedProject('TODAY')\n              }\n            }}\n          >\n            <span>\n              <FaRegCalendar />\n            </span>\n            <span>Today</span>\n          </div>\n        </li>\n        <li\n          data-testid='week'\n          className={active === 'week' ? 'active' : undefined}\n        >\n          <div\n            data-testid='week-action'\n            aria-label='Show tasks for the next 7 days'\n            tabIndex={0}\n            role='button'\n            onClick={() => {\n              setActive('week')\n              setSelectedProject('WEEK')\n            }}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                setActive('week')\n                setSelectedProject('WEEK')\n              }\n            }}\n          >\n            <span>\n              <FaRegCalendarAlt />\n            </span>\n            <span>Next 7 days</span>\n          </div>\n        </li>\n      </ul>\n      <div\n        className='sidebar__middle'\n        aria-label='Show/hide projects'\n        onClick={() => setShowProjects(!showProjects)}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') setShowProjects(!showProjects)\n        }}\n        role='button'\n        tabIndex={0}\n      >\n        <span>\n          <FaChevronDown\n            className={!showProjects ? 'hidden-projects' : undefined}\n          />\n        </span>\n        <h2>Projects</h2>\n      </div>\n\n      <ul className='sidebar__projects'>{showProjects && <Projects />}</ul>\n\n      {showProjects && <AddProject />}\n    </div>\n  )\n}\n","import React from 'react'\nimport { firebase } from '../firebase'\nexport const Checkbox = ({ id }) => {\n  // Update Firestore document archived field to true\n  const archiveTask = () => {\n    firebase.firestore().collection('tasks').doc(id).update({ archived: true })\n  }\n\n  return (\n    <div\n      className='checkbox-holder'\n      data-testid='checkbox-action'\n      onClick={() => archiveTask}\n    >\n      <span className='checkbox' />\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useTasks } from '../hooks'\nimport { Checkbox } from './Checkbox'\nimport { collatedTasks } from '../constants'\nimport { getTitle, getCollatedTitle, collatedTasksExist } from '../helpers'\nimport { useProjectsValue, useSelectedProjectValue } from '../context'\n\nexport const Tasks = () => {\n  // Access global context\n  const { projects } = useProjectsValue()\n  const { selectedProject } = useSelectedProjectValue()\n\n  // Fetch tasks for selected project view using useTask hook\n  const { tasks } = useTasks(selectedProject)\n\n  let projectName = 'ProjectName'\n\n  // Check that selectedProject is *NOT* INBOX / TODAY / WEEK\n  if (projects && selectedProject && !collatedTasksExist(selectedProject)) {\n    projectName = getTitle(projects, selectedProject).name\n  }\n\n  if (selectedProject && collatedTasksExist(selectedProject)) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name\n  }\n\n  useEffect(() => {\n    document.title = `Todo: ${projectName}`\n  }, [projectName])\n\n  return (\n    <div className='tasks' data-testid='tasks'>\n      <h2 data-testid='project-name'>{projectName}</h2>\n      <ul className='tasks__list'>\n        {tasks.map((task) => (\n          <li key={task.id}>\n            <Checkbox id={task.id} />\n            <span>{task.task}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Sidebar } from './Sidebar'\nimport { Tasks } from '../Tasks'\n\nexport const Content = () => {\n  return (\n    <section className='content'>\n      <Sidebar />\n      <Tasks />\n    </section>\n  )\n}\n","import React from 'react'\nimport { ProjectsProvider, SelectedProjectProvider } from './context'\nimport { Header } from './components/layouts/Header'\nimport { Content } from './components/layouts/Content'\nimport './App.scss'\n\nconst App = () => {\n  return (\n    <SelectedProjectProvider>\n      <ProjectsProvider>\n        <div className='App'>\n          <Header />\n          <Content />\n        </div>\n      </ProjectsProvider>\n    </SelectedProjectProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}